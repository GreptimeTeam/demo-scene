services:
  greptimedb:
    image: docker.io/greptime/greptimedb:v0.9.3
    command: standalone start --http-addr=0.0.0.0:4000 --rpc-addr=0.0.0.0:4001 --mysql-addr=0.0.0.0:4002 --postgres-addr 0.0.0.0:4003
    ports:
      - 4000:4000
      - 4001:4001
      - 4002:4002
      - 4003:4003
    networks:
      - demo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:4000/health"]
      interval: 3s
      timeout: 3s
      retries: 5
    volumes:
      - /tmp/greptimedb-demo:/tmp/greptimedb

  ev_observer:
    build:
      context: ./ev_observer
      dockerfile: Dockerfile
    networks:
      - demo-network
    environment:
      - SCRAPE_INTERVAL_SEC=${SCRAPE_INTERVAL_SEC:-300}
      - TESLA_USER_EMAIL=${TESLA_USER_EMAIL}
    env_file:
      - path: "greptime.env"
        required: false
    stdin_open: true
    tty: true
    depends_on:
      greptimedb:
        condition: service_started

  envsubst:
    image: docker.io/widerplan/envsubst
    command: "-i /greptime_ds.yml.tpl -o /config_output/greptime_ds.yml"
    volumes:
      - ./greptime_ds.yml.tpl:/greptime_ds.yml.tpl
      - datasource:/config_output
    env_file:
      - path: "greptime.env"
        required: false
    init: true

  grafana:
    build:
      context: ./grafana
      dockerfile: ./Dockerfile
    ports:
      - 3000:3000
    networks:
      - demo-network
    user: "$UID:$GID"
    volumes:
      - provisioning:/etc/grafana/provisioning
      - datasource:/etc/grafana/provisioning/datasources
    depends_on:
      envsubst:
        condition: service_completed_successfully
    restart: always

networks:
  demo-network:
volumes:
  datasource:
  provisioning:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./grafana_provisioning
